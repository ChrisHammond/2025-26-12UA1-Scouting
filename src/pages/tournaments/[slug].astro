---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";

const formatUpdated = (v?: string) => {
  if (!v) return "—";
  const d = new Date(v);
  if (isNaN(d.getTime())) return v; // fall back if it isn't a date
  return d.toLocaleString("en-US", {
    timeZone: "America/Chicago",
    year: "numeric",
    month: "short",
    day: "2-digit",
    hour: "2-digit",
    minute: "2-digit",
  });
};

// Generate all tournament routes
export async function getStaticPaths() {
  const tournaments = await getCollection("tournaments");
  return tournaments.map((t) => ({
    params: { slug: t.data.slug },
    props: { tournament: t.data },
  }));
}

const { tournament } = Astro.props;

// Load all teams and games
const teams = (await getCollection("teams")).map((t) => t.data);
const bySlug = new Map(teams.map((t) => [t.slug, t]));

const games = (await getCollection("games"))
  .map((g) => g.data)
  .filter((g) => g.tournament === tournament.slug)
  .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());

// Resolve opponents: accept slug string OR inline object
function resolveOpponent(op: any) {
  if (typeof op === "string") {
    return bySlug.get(op) ?? { name: op }; // fallback shows plain name if not found
  }
  // Inline object
  if (op && typeof op === "object") {
    // If inline also includes a slug that matches a local team, merge local data + overrides from inline
    if (op.slug && bySlug.has(op.slug)) {
      return { ...bySlug.get(op.slug), ...op };
    }
    return op; // pure inline object (no local team)
  }
  return null;
}

const opponentsRaw = Array.isArray(tournament.opponents) ? tournament.opponents : [];
const opponentTeams = opponentsRaw
  .map(resolveOpponent)
  .filter(Boolean)
  // sort: rating desc, then national rank asc, then name
  .sort((a: any, b: any) => {
    const ra = typeof a?.rating === "number" ? a.rating : -1;
    const rb = typeof b?.rating === "number" ? b.rating : -1;
    if (rb !== ra) return rb - ra;
    const na = typeof a?.mhrNationalRank === "number" ? a.mhrNationalRank : 999999;
    const nb = typeof b?.mhrNationalRank === "number" ? b?.mhrNationalRank : 999999;
    if (na !== nb) return na - nb;
    return String(a?.name ?? "").localeCompare(String(b?.name ?? ""));
  });

// Rank helpers
const hasAnyRank = opponentTeams.some(
  (t: any) =>
    Number.isFinite(t?.mhrStateRank) || Number.isFinite(t?.mhrNationalRank)
);

function formatRankPair(t: any) {
  const st = Number.isFinite(t?.mhrStateRank) ? t.mhrStateRank : "—";
  const nat = Number.isFinite(t?.mhrNationalRank) ? t.mhrNationalRank : "—";
  if (st === "—" && nat === "—") return "—";
  return `${st}/${nat}`;
}

// Helper to find local team by slug for games table linking
function getTeam(slug: string) {
  return bySlug.get(slug);
}
---

<BaseLayout title={`${tournament.name} – Chesterfield 12U A1`}>
  <a href="/tournaments/" class="text-white hover:text-red-400">← Back to Tournaments</a>
  <h1 class="text-2xl font-bold text-red-500 mt-2">{tournament.name}</h1>
  <p class="text-gray-300">
    {tournament.location} • {new Date(tournament.startDate).toLocaleDateString()} – {new Date(tournament.endDate).toLocaleDateString()}
  </p>
  {tournament.website && (
    <p class="mt-1 text-gray-300">
      Website: <a class="underline hover:text-red-400" href={tournament.website} target="_blank" rel="noopener">{tournament.website}</a>
    </p>
  )}

  <!-- Teams & MHR Ranks -->
  <section class="mt-6">
    <h2 class="text-xl font-semibold text-red-500 mb-2">Teams & MHR Ranks</h2>

    {opponentTeams.length === 0 ? (
      <p class="text-gray-300">No opponent teams listed for this tournament.</p>
    ) : (
      <div class="overflow-x-auto rounded-lg border border-red-600">
        <table class="min-w-full text-sm">
          <thead class="bg-red-600 text-white uppercase text-xs">
            <tr>
              <th class="px-3 py-2 text-left">Team</th>
              <th class="px-3 py-2 text-left">Record</th>
              <th class="px-3 py-2 text-left">MHR Rating</th>
              {hasAnyRank && <th class="px-3 py-2 text-left">Rank (ST/NAT)</th>}
              <th class="px-3 py-2 text-left">Links</th>
              <th class="px-3 py-2 text-left">Updated</th>
            </tr>
          </thead>
          <tbody class="bg-gray-900 divide-y divide-gray-700">
            {opponentTeams.map((t: any) => (
              <tr class="hover:bg-gray-800">
                <td class="px-3 py-2">
                  {t?.slug
                    ? <a href={`/teams/${t.slug}/`} class="underline hover:text-red-400">{t.name}</a>
                    : t?.name ?? "—"}
                </td>
                <td class="px-3 py-2">{t?.record ?? "—"}</td>
                <td class="px-3 py-2">{typeof t?.rating === "number" ? t.rating.toFixed(2) : "—"}</td>
                {hasAnyRank && <td class="px-3 py-2">{formatRankPair(t)}</td>}
                <td class="px-3 py-2 space-x-3">
                  {t?.website && <a href={t.website} target="_blank" rel="noopener" class="underline hover:text-red-400">Site</a>}
                  {t?.mhrUrl && <a href={t.mhrUrl} target="_blank" rel="noopener" class="underline hover:text-red-400">MHR</a>}
                </td>
                <td class="px-3 py-2">
                  {formatUpdated(t.lastUpdated ?? t.updatedFromMHRAt)}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    )}
  </section>

  <!-- Games -->
  {games.length > 0 && (
    <section class="mt-8">
      <h2 class="text-xl font-semibold text-red-500 mb-2">Games</h2>
      <div class="overflow-x-auto rounded-lg border border-red-600">
        <table class="min-w-full text-sm">
          <thead class="bg-red-600 text-white uppercase text-xs">
            <tr>
              <th class="px-3 py-2 text-left">Date</th>
              <th class="px-3 py-2 text-left">Opponent</th>
              <th class="px-3 py-2">Home/Away</th>
              <th class="px-3 py-2">League</th>
              <th class="px-3 py-2 text-left">Venue</th>
              <th class="px-3 py-2 text-left">Result</th>
            </tr>
          </thead>
          <tbody class="bg-gray-900 divide-y divide-gray-700">
            {games.map((g) => {
              const opp = getTeam(g.opponent);
              return (
                <tr class="hover:bg-gray-800">
                  <td class="px-3 py-2">{new Date(g.date).toLocaleDateString()}</td>
                  <td class="px-3 py-2">
                    {opp
                      ? <a href={`/teams/${opp.slug}/`} class="underline hover:text-red-400">{opp.name}</a>
                      : g.opponent}
                  </td>
                  <td class="px-3 py-2">{g.homeAway}</td>
                  <td class="px-3 py-2">{g.leagueGame ? "Yes" : "No"}</td>
                  <td class="px-3 py-2">{g.venue ?? "—"}</td>
                  <td class="px-3 py-2">{g.result ? `${g.result} ${g.scoreFor}-${g.scoreAgainst}` : "—"}</td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>
    </section>
  )}
</BaseLayout>
