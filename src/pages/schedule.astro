---
import BaseLayout from "../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
import settings from "../config/settings";
import { winProb } from "../lib/probability";
import WinProbBadge from "../components/WinProbBadge.astro";

// Manual games (content)
const manualGames = (await getCollection("games")).map((g) => g.data);

// Teams
const teamEntries = await getCollection("teams");
const teams = teamEntries.map(t => t.data);
const teamBySlug = new Map(teams.map(t => [t.slug, t]));
const myTeam = teamBySlug.get(settings.teamSlug);

// Auto (generated) for your team
const autoMods = import.meta.glob("../data/auto-schedule/*.json", { eager: true });
const autoGames = (autoMods[`../data/auto-schedule/${settings.teamSlug}.json`]?.default ?? []);

// Merge & de-duplicate by date+time+opponent (manual overrides auto on conflict)
const key = (g) => [g.date, g.time ?? "", (g.opponent ?? "").toLowerCase()].join("|");
const mergedMap = new Map();
[...autoGames, ...manualGames].forEach((g) => mergedMap.set(key(g), g));
const games = [...mergedMap.values()].sort((a, b) => (a.date + (a.time ?? "")).localeCompare(b.date + (b.time ?? "")));

// helper: fuzzy match opponent to a team object
function matchTeamByName(name: string) {
  const n = (name || '').toLowerCase().replace(/[^a-z0-9]/g, '');
  let best = null;
  for (const t of teams) {
    const tn = t.name.toLowerCase().replace(/[^a-z0-9]/g, '');
    if (tn.includes(n) || n.includes(tn)) { best = t; break; }
  }
  return best;
}
---

<BaseLayout title="Schedule">
  <h1 class="text-2xl font-bold text-red-500 mb-4">Schedule</h1>
  {games.length === 0 ? (
    <p class="text-gray-300">No games found.</p>
  ) : (
    <div class="overflow-x-auto rounded-lg border border-red-600">
      <table class="min-w-full text-sm">
        <thead class="bg-red-600 text-white uppercase text-xs">
          <tr>
            <th class="px-3 py-2 text-left">Date</th>
            <th class="px-3 py-2 text-left">Time</th>
            <th class="px-3 py-2 text-left">Opponent</th>
            <th class="px-3 py-2 text-left">H/A</th>
            <th class="px-3 py-2 text-left">Venue</th>
            <th class="px-3 py-2 text-left">Win %</th>
            <th class="px-3 py-2 text-left">Preview</th>
            <th class="px-3 py-2 text-left">Source</th>
          </tr>
        </thead>
        <tbody class="bg-gray-900 divide-y divide-gray-700">
          {games.map((g) => {
            const opp = matchTeamByName(g.opponent ?? "");
            const p = (myTeam && opp && typeof myTeam.rating === "number" && typeof opp.rating === "number")
              ? winProb(myTeam.rating, opp.rating) : undefined;
            const previewHref = opp ? `/matchups/${opp.slug}/` : undefined;
            return (
              <tr class="hover:bg-gray-800">
                <td class="px-3 py-2">{g.date}</td>
                <td class="px-3 py-2">{g.time ?? "—"}</td>
                <td class="px-3 py-2">
                  {opp ? <a class="underline hover:text-red-400" href={`/teams/${opp.slug}/`}>{opp.name}</a> : (g.opponent ?? "TBD")}
                </td>
                <td class="px-3 py-2">{g.homeAway ?? "Neutral"}</td>
                <td class="px-3 py-2">{g.venue ?? "—"}</td>
                <td class="px-3 py-2"><WinProbBadge p={p} /></td>
                <td class="px-3 py-2">
                  {previewHref ? <a class="underline hover:text-red-400" href={previewHref}>Matchup</a> : "—"}
                </td>
                <td class="px-3 py-2 uppercase text-xs text-gray-400">{g.source ?? "manual"}</td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  )}
</BaseLayout>
