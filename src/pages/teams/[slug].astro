---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
import RatingHistoryChart from "../../components/RatingHistoryChart.astro";
import settings from "../../config/settings";

export async function getStaticPaths() {
  const teams = await getCollection("teams");
  return teams.map((t) => ({
    params: { slug: t.data.slug },
    props: { team: t.data },
  }));
}

const { team } = Astro.props as { team: any };

// Load all teams so we can find "our" team for matchup preview
const allTeams = (await getCollection("teams")).map((t) => t.data);
const myTeam = allTeams.find((t) => t.slug === settings.teamSlug);

// Load games (vs this opponent)
const games = (await getCollection("games"))
  .map((g) => g.data)
  .filter((g) => g.opponent === team.slug || g.opponentSlug === team.slug)
  .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());

// Load tournaments
const tournaments = (await getCollection("tournaments")).map((t) => t.data);
function getTournament(slug: string) {
  return tournaments.find((t) => t.slug === slug);
}

/** -------------------------
 * Robust MHR history loader
 * ------------------------- */
function slugifyName(n: string) {
  return String(n).toLowerCase().trim().replace(/[^a-z0-9]+/g, "-").replace(/(^-|-$)/g, "");
}

const wantSlug = String(team.slug ?? "").toLowerCase();
const wantNameSlug = slugifyName(team.name ?? "");

// Accept optional alternates in the team frontmatter
const altSlugs: string[] = Array.isArray(team.altSlugs) ? team.altSlugs : [];
const mhrSlug = team.mhrSlug ? String(team.mhrSlug).toLowerCase() : undefined;
// Sometimes people name files with the numeric MHR id
const idCandidates = [
  team.mhrTeamId && String(team.mhrTeamId),
  team.mhrId && String(team.mhrId),
].filter(Boolean) as string[];

// Candidates we’ll try in order
const desiredKeys = [
  wantSlug,
  wantNameSlug,
  ...altSlugs.map((s) => String(s).toLowerCase()),
  ...(mhrSlug ? [mhrSlug] : []),
  ...idCandidates,
].filter(Boolean);

// Support flat **and** nested dirs under /src/data/mhr-history
const histMods = import.meta.glob(
  [
    "/src/data/mhr-history/*.json",
    "/src/data/mhr-history/*/*.json",
  ],
  { eager: true }
);

// Normalize modules to { slugLower, fileBase, data[] }
function normalizeModule(path: string, mod: any) {
  const file = path.split("/").pop() || "";
  const base = file.replace(/\.json$/i, "");
  const slugLower = base.toLowerCase();

  // Vite JSON can surface as { default: <parsed> } or just <parsed>
  const val = (mod && typeof mod === "object" && "default" in mod) ? mod.default : mod;
  // Accept arrays or {history: []}
  const arr = Array.isArray(val) ? val : Array.isArray(val?.history) ? val.history : [];

  return { slugLower, fileBase: base, data: arr as any[] };
}

const files = Object.entries(histMods).map(([p, m]) => normalizeModule(p, m));

// Find best file by: exact ===, startsWith, includes (in both directions)
function pickFile() {
  // try each desired key in order with multiple matching strategies
  for (const key of desiredKeys) {
    const k = key.toLowerCase();

    const exact = files.find(f => f.slugLower === k);
    if (exact) return exact;

    const startsA = files.find(f => f.slugLower.startsWith(k));
    if (startsA) return startsA;

    const startsB = files.find(f => k.startsWith(f.slugLower));
    if (startsB) return startsB;

    const includesA = files.find(f => f.slugLower.includes(k));
    if (includesA) return includesA;

    const includesB = files.find(f => k.includes(f.slugLower));
    if (includesB) return includesB;
  }
  return null;
}

let picked = pickFile();

// If no file matched, also accept inline history attached to the team frontmatter (team.history)
let ratingHistory: Array<{ date: string; rating: number }> = [];

if (picked?.data?.length) {
  ratingHistory = picked.data
    .filter((p: any) => p && p.date && typeof p.rating === "number")
    .map((p: any) => ({ date: String(p.date), rating: Number(p.rating) }));
} else if (Array.isArray(team.history) && team.history.length) {
  ratingHistory = team.history
    .filter((p: any) => p && p.date && typeof p.rating === "number")
    .map((p: any) => ({ date: String(p.date), rating: Number(p.rating) }));
}

// Sort ascending by date (ISO YYYY-MM-DD recommended)
ratingHistory.sort((a, b) => String(a.date).localeCompare(String(b.date)));

if (import.meta.env.DEV) {
  const available = files.map(f => f.fileBase).join(", ");
  if (!picked && ratingHistory.length === 0) {
    console.warn(`[team page] No mhr-history JSON matched for "${team.slug}" (${team.name}). Candidates tried: ${JSON.stringify(desiredKeys)}. Available files: ${available}`);
  } else if (picked && ratingHistory.length === 0) {
    console.warn(`[team page] History file "${picked.fileBase}.json" matched but no valid (date + numeric rating) points were found.`);
  } else if (picked) {
    console.info(`[team page] Using history "${picked.fileBase}.json" → ${ratingHistory.length} points.`);
  } else {
    console.info(`[team page] Using inline team.history → ${ratingHistory.length} points.`);
  }
}

/** -------------------------
 * Rank coercion (handles "7th Missouri 12U", "209th USA 12U - All", numeric strings, or numbers)
 * ------------------------- */
function coerceRank(val: unknown): number | undefined {
  if (typeof val === "number" && Number.isFinite(val)) return val;
  if (typeof val === "string") {
    const m = val.match(/\d+/);
    if (m) return Number(m[0]);
  }
  return undefined;
}

// Try several possible fields (frontmatter flexibility)
const stateRank =
  coerceRank(team.mhrStateRank) ??
  coerceRank(team.stateRank) ??
  coerceRank(team.mhr?.stateRank) ??
  coerceRank(team.mhrStateRankText) ??
  coerceRank(team.mhr?.ranks?.state);

const nationalRank =
  coerceRank(team.mhrNationalRank) ??
  coerceRank(team.nationalRank) ??
  coerceRank(team.mhr?.nationalRank) ??
  coerceRank(team.mhrNationalRankText) ??
  coerceRank(team.mhr?.ranks?.national);

if (import.meta.env.DEV) {
  console.info(`[team page] Ranks resolved → state=${stateRank ?? "—"}, national=${nationalRank ?? "—"}`);
}

// --- Matchup preview helpers ---
const isSelf = team.slug === settings.teamSlug;
const SCALE = 6;
function winProb(rA?: number, rB?: number) {
  if (typeof rA !== "number" || typeof rB !== "number") return undefined;
  return 1 / (1 + Math.exp(-(rA - rB) / SCALE));
}
const prob =
  !isSelf && myTeam ? winProb(myTeam?.rating as number, team?.rating as number) : undefined;
const probLabel = typeof prob === "number" ? `${Math.round(prob * 100)}%` : "—";
const ratingDiff =
  typeof myTeam?.rating === "number" && typeof team?.rating === "number"
    ? (myTeam.rating - team.rating).toFixed(2)
    : null;

// Meta description
const pageDescription = `${team.name} overview: record, MHR rating/ranks, rating trend, and game history in ${settings.leagueName} ${settings.divisionName}.`;
---

<BaseLayout title={`${team.name} – ${settings.portalName}`} description={pageDescription}>
  <a href="/teams/" class="text-white hover:text-red-400">← Back to Teams</a>
  <h1 class="text-2xl font-bold text-red-500 mt-2">{team.name}</h1>

  <!-- Team meta -->
  <div class="mt-2 text-gray-300 space-y-1">
    {team.division && <p>Division: {team.division}</p>}
    {team.league && <p>League: {team.league}</p>}
    {team.record && <p>Record: {team.record}</p>}
    {typeof team.rating === "number" && <p>Current MHR Rating: {team.rating.toFixed(2)}</p>}
    {team.website && (
      <p>Website: <a href={team.website} target="_blank" rel="noopener" class="underline hover:text-red-400">{team.website}</a></p>
    )}
    {team.mhrUrl && (
      <p>MHR: <a href={team.mhrUrl} target="_blank" rel="noopener" class="underline hover:text-red-400">{team.mhrUrl}</a></p>
    )}
  </div>

  <!-- OPTIONAL TEAM NOTE -->
  {team.note && (
    <section class="mt-4">
      <div class="rounded-lg border border-yellow-600 bg-yellow-900/20 text-yellow-100 p-3">
        <div class="text-xs uppercase tracking-wide font-semibold text-yellow-300 mb-1">
          Team Note
        </div>
        <p class="whitespace-pre-line">{team.note}</p>
      </div>
    </section>
  )}

  <!-- Ranks row -->
  <div class="mt-3 flex flex-wrap gap-2">
    <span class="inline-flex items-center gap-2 px-3 py-1 rounded-full border border-red-600 bg-red-600/20 text-red-300">
      <span class="text-xs uppercase tracking-wide">State Rank</span>
      <span class="font-semibold text-white">{stateRank != null ? `#${stateRank}` : "—"}</span>
    </span>
    <span class="inline-flex items-center gap-2 px-3 py-1 rounded-full border border-red-600 bg-red-600/20 text-red-300">
      <span class="text-xs uppercase tracking-wide">National Rank</span>
      <span class="font-semibold text-white">{nationalRank != null ? `#${nationalRank}` : "—"}</span>
    </span>
    {team.lastUpdated && (
      <span class="inline-flex items-center gap-2 px-3 py-1 rounded-full border border-gray-700 bg-gray-800 text-gray-300">
        <span class="text-xs uppercase tracking-wide">Updated</span>
        <span class="font-mono">{team.lastUpdated}</span>
      </span>
    )}
  </div>

  <!-- Matchup preview card -->
  {!isSelf && myTeam && (
    <section class="mt-6">
      <div class="bg-gray-900 rounded-lg p-4 border border-red-600">
        <h2 class="text-lg font-semibold text-red-400 mb-2">Matchup vs {myTeam.name}</h2>

        <div class="flex flex-wrap items-center gap-3 text-sm">
          <span class="inline-block rounded px-2 py-0.5 bg-gray-700 text-gray-200">
            Win % for {myTeam.name}: <strong class="ml-1">{probLabel}</strong>
          </span>
          {ratingDiff && (
            <span class="inline-block rounded px-2 py-0.5 bg-gray-800 text-gray-300">
              Rating Δ (us - them): <strong class="ml-1">{ratingDiff}</strong>
            </span>
          )}
          {typeof myTeam.mhrNationalRank === "number" && nationalRank != null && (
            <span class="inline-block rounded px-2 py-0.5 bg-gray-800 text-gray-300">
              Nat Rank: <strong class="ml-1">#{myTeam.mhrNationalRank}</strong> vs <strong class="ml-1">#{nationalRank}</strong>
            </span>
          )}
        </div>

        <div class="mt-3">
          <a href={`/matchups/${team.slug}/`} class="inline-block rounded-lg border border-red-600 bg-red-600/20 px-3 py-1.5 text-sm text-red-200 hover:bg-red-600/30">
            Open full matchup
          </a>
        </div>
      </div>
    </section>
  )}

  <!-- Rating trend -->
  <section class="mt-6">
    <RatingHistoryChart
      title="MHR Rating Trend"
      series={ratingHistory}
      canvasId={`mhr-chart-${team.slug}`}
    />
  </section>

  <!-- Games table -->
  <h2 class="text-xl font-semibold text-red-500 mt-8 mb-2">Games vs {team.name}</h2>

  {games.length === 0 ? (
    <p class="text-gray-300">No games recorded yet against this team.</p>
  ) : (
    <div class="overflow-x-auto rounded-lg border border-red-600">
      <table class="min-w-full text-sm">
        <thead class="bg-red-600 text-white uppercase text-xs">
          <tr>
            <th class="px-3 py-2 text-left">Date</th>
            <th class="px-3 py-2">Home/Away</th>
            <th class="px-3 py-2">League</th>
            <th class="px-3 py-2 text-left">Tournament</th>
            <th class="px-3 py-2 text-left">Venue</th>
            <th class="px-3 py-2 text-left">Result</th>
          </tr>
        </thead>
        <tbody class="bg-gray-900 divide-y divide-gray-700">
          {games.map((g) => {
            const tourney = g.tournament ? getTournament(g.tournament) : null;
            return (
              <tr class="hover:bg-gray-800">
                <td class="px-3 py-2">{new Date(g.date).toLocaleDateString()}</td>
                <td class="px-3 py-2">{g.homeAway}</td>
                <td class="px-3 py-2">{g.leagueGame ? "Yes" : "No"}</td>
                <td class="px-3 py-2">
                  {tourney ? <a class="underline hover:text-red-400" href={`/tournaments/${tourney.slug}/`}>{tourney.name}</a> : "—"}
                </td>
                <td class="px-3 py-2">{g.venue ?? "—"}</td>
                <td class="px-3 py-2">{g.result ? `${g.result} ${g.scoreFor}-${g.scoreAgainst}` : "—"}</td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  )}
</BaseLayout>
