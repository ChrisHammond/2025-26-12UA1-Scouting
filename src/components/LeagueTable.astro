---
import { getCollection } from "astro:content";
import settings from "../config/settings";

/** Props (all optional) */
const {
  league = settings.leagueName,
  division = settings.divisionName,
  hideSelf = false,
  selfSlug = settings.teamSlug,
  highlightSelf = true,
} = Astro.props;

const norm = (s?: string) => (s ?? "").replace(/[^a-z0-9]/gi, "").toLowerCase();
const leagueKey = norm(league);
const divisionKey = norm(division);

const rows = (await getCollection("teams"))
  .map((t) => t.data)
  .filter((t) => norm(t.league) === leagueKey && norm(t.division) === divisionKey)
  .filter((t) => (hideSelf ? t.slug !== selfSlug : true))
  .sort((a, b) => {
    // Sort by rating desc, then national rank asc, then name
    const ra = typeof a.rating === "number" ? a.rating : -1;
    const rb = typeof b.rating === "number" ? b.rating : -1;
    if (rb !== ra) return rb - ra;
    const na = typeof a.mhrNationalRank === "number" ? a.mhrNationalRank : 999999;
    const nb = typeof b.mhrNationalRank === "number" ? b.mhrNationalRank : 999999;
    if (na !== nb) return na - nb;
    return a.name.localeCompare(b.name);
  });

function updatedBadge(lastUpdated?: string) {
  if (!lastUpdated) return { text: "—", cls: "" };
  const d = new Date(lastUpdated);
  if (isNaN(d.getTime())) return { text: lastUpdated, cls: "" };
  const ms = Date.now() - d.getTime();
  const days = Math.floor(ms / (1000 * 60 * 60 * 24));
  const text = days === 0 ? "today" : `${days}d ago`;
  // color code staleness
  const cls =
    days <= 7 ? "text-green-300" :
    days <= 21 ? "text-yellow-300" :
    "text-red-300";
  return { text, cls };
}
---

<div class="mt-8">
  <h2 class="text-2xl font-semibold text-red-500 mb-3">
    {league} — {division} Standings
  </h2>

  {rows.length === 0 ? (
    <p class="text-gray-300">
      No teams matched. Ensure team JSON has <code>league: "{league}"</code> and
      <code>division: "{division}"</code>.
    </p>
  ) : (
    <div class="overflow-x-auto rounded-lg border border-red-600">
      <table class="min-w-full text-sm">
        <thead class="bg-red-600 text-white uppercase text-xs">
          <tr>
            <th class="px-3 py-2 text-left">#</th>
            <th class="px-3 py-2 text-left">Team</th>
            <th class="px-3 py-2 text-left">Record</th>
            <th class="px-3 py-2 text-left">MHR Rating</th>
            <th class="px-3 py-2 text-left">State Rank</th>
            <th class="px-3 py-2 text-left">National Rank</th>
            <th class="px-3 py-2 text-left">Links</th>
            <th class="px-3 py-2 text-left">Updated</th>
          </tr>
        </thead>
        <tbody class="bg-gray-900 divide-y divide-gray-700">
          {rows.map((t, i) => {
            const isSelf = t.slug === selfSlug;
            const badge = updatedBadge(t.lastUpdated);
            return (
              <tr class={`hover:bg-gray-800 ${highlightSelf && isSelf ? "ring-1 ring-red-600/70" : ""}`}>
                <td class="px-3 py-2">{i + 1}</td>
                <td class="px-3 py-2">
                  <a href={`/teams/${t.slug}/`} class="underline hover:text-red-400">
                    {t.name}
                  </a>
                  {highlightSelf && isSelf && (
                    <span class="ml-2 inline-block rounded-full bg-red-600/30 border border-red-600 px-2 py-0.5 text-[10px] uppercase tracking-wide text-red-300 align-middle">Your Team</span>
                  )}
                </td>
                <td class="px-3 py-2">{t.record ?? "—"}</td>
                <td class="px-3 py-2">{typeof t.rating === "number" ? t.rating.toFixed(2) : "—"}</td>
                <td class="px-3 py-2">{typeof t.mhrStateRank === "number" ? `#${t.mhrStateRank}` : "—"}</td>
                <td class="px-3 py-2">{typeof t.mhrNationalRank === "number" ? `#${t.mhrNationalRank}` : "—"}</td>
                <td class="px-3 py-2 space-x-3">
                  {t.website && <a href={t.website} target="_blank" rel="noopener" class="underline hover:text-red-400">Site</a>}
                  {t.mhrUrl && <a href={t.mhrUrl} target="_blank" rel="noopener" class="underline hover:text-red-400">MHR</a>}
                </td>
                <td class="px-3 py-2">
                  <span class={`font-mono ${badge.cls}`}>{badge.text}</span>
                  {t.lastUpdated && <span class="ml-2 text-gray-400">({t.lastUpdated})</span>}
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  )}
</div>
